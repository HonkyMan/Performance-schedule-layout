"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var event_objects = document.querySelectorAll('ul.event>li');
var rival_objects = document.querySelectorAll('.event_rivals');
var position = 0;
var COUNT_OF_ELEMENTS = event_objects.length - 1;
var curr_position = 0; // parseInt((COUNT_OF_ELEMENTS / 2), 10);

var classes = {
  'small_top': ["small", "small_top"],
  'middle_top': ["middle", "middle_top"],
  'active': ["active"],
  'middle_bottom': ["middle", "middle_bottom"],
  'small_bottom': ["small", "small_bottom"],
  'none': ["none"]
}; // const classes = ['small  small_bottom', 'middle middle_bottom', 'active', 'middle middle_top', 'small small_top']

document.addEventListener('DOMContentLoaded', function () {
  var _iterator = _createForOfIteratorHelper(event_objects),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var event = _step.value;
      event.addEventListener('click', function (e) {
        change_positions(this.getAttribute('data-pos'), true, e.currentTarget);
        change_classes();
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  ;
});
window.addEventListener('wheel', function (e) {
  if (position - e.deltaY < 0 && curr_position > -(COUNT_OF_ELEMENTS / 2)) {
    curr_position--;
    change_positions(-1);
    change_classes();
  } else if (position - e.deltaY > 0 && curr_position < COUNT_OF_ELEMENTS / 2) {
    curr_position++;
    change_positions(1);
    change_classes();
  }
});

var change_positions = function change_positions(selected) {
  var isIterable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var currentTarget = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  if (parseInt(selected, 10) == 0) return;

  if (isIterable) {
    curr_position = parseInt(currentTarget.getAttribute('data-current-pos'), 10);
  }

  event_objects.forEach(function (obj) {
    obj.setAttribute('data-pos', parseInt(obj.getAttribute('data-pos'), 10) - parseInt(selected, 10));
  });
  rival_objects.forEach(function (obj) {
    obj.setAttribute('data-rival-pos', parseInt(obj.getAttribute('data-rival-pos'), 10) - parseInt(selected, 10));
  });
};

var is_last = function is_last() {
  event_objects.forEach(function (obj) {
    if (Math.abs(parseInt(obj.getAttribute('data-pos'), 10)) == event_objects.length - 1) {
      // alert('last')
      return true;
    }
  });
  return false;
};

var change_classes = function change_classes() {
  event_objects.forEach(function (obj) {
    var num = parseInt(obj.getAttribute('data-pos'), 10);

    switch (num) {
      case 0:
        obj.className = '';
        obj.classList.toggle('active');
        return;

      case 1:
        obj.className = '';
        obj.classList.toggleMany(classes['middle_top']);
        return;

      case 2:
        obj.className = '';
        obj.classList.toggleMany(classes['small_top']);
        return;

      case -1:
        obj.className = '';
        obj.classList.toggleMany(classes['middle_bottom']);
        return;

      case -2:
        obj.className = '';
        obj.classList.toggleMany(classes['small_bottom']);
        return;

      default:
        // obj.className = '';
        obj.classList.add('none');
        break;
    }
  });
  rival_objects.forEach(function (obj) {
    var num = parseInt(obj.getAttribute('data-rival-pos'), 10);

    switch (num) {
      case 0:
        obj.classList.add('show');
        break;

      case 1:
        obj.classList.remove('show');
        break;

      case 2:
        obj.classList.remove('show');
        break;

      case -1:
        obj.classList.remove('show');
        break;

      case -2:
        obj.classList.remove('show');
        break;

      default:
        obj.classList.remove('show');
        break;
    }
  });
};

DOMTokenList.prototype.toggleMany = function (classes) {
  for (var i = 0, length = classes.length; i < length; i++) {
    this.toggle(classes[i]);
  }
};

DOMTokenList.prototype.removeMany = function (classes) {
  for (var i = 0, length = classes.length; i < length; i++) {
    this.remove(classes[i]);
  }
};